#ifndef NODE_H
#define NODE_H

#include <SFML\Graphics.hpp>
#include "Point.h"



namespace pf
{

	/////////////////////////////////////////////////////////////////
	/// \brief Types of Node states.
	/////////////////////////////////////////////////////////////////
	enum NodeType
	{
		passable,
		obsticle,
		start,
		end,
		onOpenList,
		onClosedList
	};






	class Node : public sf::RectangleShape
	{
	private:
		/////////////////////////////////////////////////////////////////
		/// \brief Node coordinance in relation to grid.
		/////////////////////////////////////////////////////////////////
		Point coord;

		/////////////////////////////////////////////////////////////////
		/// \brief Nodes predecessor.
		/////////////////////////////////////////////////////////////////
		Node *parent;

		/////////////////////////////////////////////////////////////////
		/// \brief Approximated distance between starting and current Node.
		/////////////////////////////////////////////////////////////////
		int g;

		/////////////////////////////////////////////////////////////////
		/// \brief Approximated distance between current and ending Node.
		/////////////////////////////////////////////////////////////////
		int h;

		/////////////////////////////////////////////////////////////////
		/// \brief Approximated distance between starting and ending Node. f = g + h.
		/////////////////////////////////////////////////////////////////
		int f;

		/////////////////////////////////////////////////////////////////
		/// \brief Nodes current state.
		/////////////////////////////////////////////////////////////////
		NodeType type;



	public:
		/////////////////////////////////////////////////////////////////
		/// \brief Determines size and position of Node in relation to given resolution.
		///			!!!Must be declared before execution!!!
		/////////////////////////////////////////////////////////////////
		static const int resolution;

		/////////////////////////////////////////////////////////////////
		/// \brief Constructor with arguments.
		/////////////////////////////////////////////////////////////////
		Node(Point, NodeType);

		/////////////////////////////////////////////////////////////////
		/// \brief Node Destructor.
		/////////////////////////////////////////////////////////////////
		~Node();

		/////////////////////////////////////////////////////////////////
		/// \brief Returns Point with position of this Node.
		/////////////////////////////////////////////////////////////////
		Point getCoord() const;

		/////////////////////////////////////////////////////////////////
		/// \brief Returns Node* which represents this Nodes predecessor.
		/////////////////////////////////////////////////////////////////
		Node* getParent() const;

		/////////////////////////////////////////////////////////////////
		/// \brief Returns int (f) which represents heuristics defined such that
		///					"f = g + h".
		/////////////////////////////////////////////////////////////////
		int getCost() const;

		/////////////////////////////////////////////////////////////////
		/// \brief Returns enum NodeType which represents state of this Node.
		/////////////////////////////////////////////////////////////////
		NodeType getNodeType() const;

		/////////////////////////////////////////////////////////////////
		/// \brief Sets given Node to be predecessor of this Node (creating order).
		/////////////////////////////////////////////////////////////////
		void setParent(Node *);

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node to default state.
		/////////////////////////////////////////////////////////////////
		void setDefault();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node to open for exploration.
		/////////////////////////////////////////////////////////////////
		void setPassable();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node as an obsticle, not suitable for exploration.
		/////////////////////////////////////////////////////////////////
		void setObsticle();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node as a starting point.
		/////////////////////////////////////////////////////////////////
		void setStart();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node as an ending point.
		/////////////////////////////////////////////////////////////////
		void setEnd();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node to potential successor.
		/////////////////////////////////////////////////////////////////
		void setOnOpenList();

		/////////////////////////////////////////////////////////////////
		/// \brief Sets Node as already evaluated.
		/////////////////////////////////////////////////////////////////
		void setOnClosedList();

		/////////////////////////////////////////////////////////////////
		/// \brief Computes g cost (distance from starting to this Node).
		/////////////////////////////////////////////////////////////////
		void computeG(Point);

		/////////////////////////////////////////////////////////////////
		/// \brief Computes h cost (distance from this to ending Node).
		/////////////////////////////////////////////////////////////////
		void computeH(Point);

		/////////////////////////////////////////////////////////////////
		/// \brief Computes heuristics based on g and h.
		///				"f = g + h".
		/////////////////////////////////////////////////////////////////
		void computeF();

		/////////////////////////////////////////////////////////////////
		/// \brief Computes heuristics, g, h, and f.
		///				"f = g + h".
		/////////////////////////////////////////////////////////////////
		void computeF(Point, Point);

		/////////////////////////////////////////////////////////////////
		/// \brief Equal operator overload.
		/////////////////////////////////////////////////////////////////
		friend bool operator==(const Node &, const Node &);

		/////////////////////////////////////////////////////////////////
		/// \brief Different operator overload.
		/////////////////////////////////////////////////////////////////
		friend bool operator!=(const Node &, const Node &);
	};
}
#endif // !NODE_H

